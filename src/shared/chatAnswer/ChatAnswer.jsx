"use client";
import { useState, useEffect } from "react";

export default function ChatAnswer({ visible, onClose }) {
  const [messages, setMessages] = useState([]);
  const [currentText, setCurrentText] = useState("");
  const [showTyping, setShowTyping] = useState(false);

  const baynurMessage =
    "–Ø –≤–µ—Ä—é, —á—Ç–æ –Ω–∞—à–µ –±—É–¥—É—â–µ–µ –±—É–¥–µ—Ç –Ω–∞–ø–æ–ª–Ω–µ–Ω–æ –ª—é–±–æ–≤—å—é, —Ç–µ–ø–ª–æ–º –∏ —Å—á–∞—Å—Ç—å–µ–º. –í—Å—ë —Å–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ –≤–ø–µ—Ä–µ–¥–∏, –∏ —è —Ö–æ—á—É –ø—Ä–æ–π—Ç–∏ —ç—Ç–æ—Ç –ø—É—Ç—å —Ç–æ–ª—å–∫–æ —Å —Ç–æ–±–æ–π.";
  const begimayMessage =
    "–Ø –±–ª–∞–≥–æ–¥–∞—Ä–Ω–∞ —Å—É–¥—å–±–µ –∑–∞ —Ç–µ–±—è. –ù–∏—á–µ–≥–æ –Ω–µ —Ö–æ—á—É –±–æ–ª—å—à–µ, —á–µ–º –±—ã—Ç—å —Ä—è–¥–æ–º —Å —Ç–æ–±–æ–π –∏ —Å—Ç—Ä–æ–∏—Ç—å –Ω–∞—à –º–∏—Ä.";

  useEffect(() => {
    if (!visible) return;

    setMessages([{ sender: "–ñ—É–º–∞–¥—ã–ª", text: baynurMessage }]);
    setCurrentText("");
    setShowTyping(true);

    let index = 0;
    const typingInterval = setInterval(() => {
      setCurrentText(begimayMessage.slice(0, index + 1));
      index++;
      if (index === begimayMessage.length) {
        clearInterval(typingInterval);
        setMessages((prev) => [
          ...prev,
          { sender: "–î–∞—Ä–∏–∫–∞üíó", text: begimayMessage },
        ]);
        setShowTyping(false);
      }
    }, 100);

    return () => clearInterval(typingInterval);
  }, [visible]);

  // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ Escape
  useEffect(() => {
    if (!visible) return;
    const onKey = (e) => {
      if (e.key === "Escape") onClose();
    };
    document.addEventListener("keydown", onKey);
    return () => document.removeEventListener("keydown", onKey);
  }, [visible, onClose]);

  if (!visible) return null;

  return (
    // –∫–ª–∏–∫ –ø–æ –æ–≤–µ—Ä–ª–µ—é –∑–∞–∫—Ä—ã–≤–∞–µ—Ç
    <div className="chat-overlay" onClick={onClose}>
      {/* –∞ –≤–Ω—É—Ç—Ä–∏ ‚Äî –±–ª–æ–∫–∏—Ä—É–µ–º –≤—Å–ø–ª—ã—Ç–∏–µ, —á—Ç–æ–±—ã –∫–ª–∏–∫–∏ –ø–æ —á–∞—Ç—É –ù–ï –∑–∞–∫—Ä—ã–≤–∞–ª–∏ –º–æ–¥–∞–ª */}
      <div className="chat-container" onClick={(e) => e.stopPropagation()}>
        {/* <button
          type="button"
          className="close-btn"
          onClick={onClose}
          aria-label="–ó–∞–∫—Ä—ã—Ç—å"
        >
          ‚úñÔ∏è
        </button> */}

        {messages.map((msg, i) => (
          <div
            key={i}
            className={`chat-message ${
              msg.sender === "–ñ—É–º–∞–¥—ã–ª" ? "chat-right" : "chat-left"
            }`}
          >
            <p className="person">{msg.sender}</p>
            <div className="bubble">{msg.text}</div>
          </div>
        ))}

        {showTyping && (
          <div className="chat-message chat-left">
            <p className="person">–î–∞—Ä–∏–∫–∞üíó..</p>
            <div className="bubble">{currentText || "‚Ä¶"}</div>
          </div>
        )}
      </div>
    </div>
  );
}
